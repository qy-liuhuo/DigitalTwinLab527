/*
 * main.cpp
 *
 ************************************************************************************
 *
 ************************************************************************************
 */

#include <Arduino.h>
#include <SPI.h>

// select only NEC and the universal decoder for pulse distance protocols
#define DECODE_NEC      // Includes Apple and Onkyo
#define DECODE_DISTANCE // in case NEC is not received correctly

#define NO_LED_FEEDBACK_CODE // saves 500 bytes program memory
// #define EXCLUDE_UNIVERSAL_PROTOCOLS // Saves up to 1000 bytes program memory.
// #define EXCLUDE_EXOTIC_PROTOCOLS
// #define SEND_PWM_BY_TIMER
// #define USE_NO_SEND_PWM
// #define DEBUG // Activate this for lots of lovely debug output from the decoders.

#include <RF24.h>
#include <IRremote.hpp>

#define DELAY_AFTER_SEND 2000
#define DELAY_AFTER_LOOP 5000

#define IR_RECEIVE_PIN 14
#define IR_SEND_PIN 4

uint16_t sAddress = 0x0102;
uint8_t sCommand = 0x34;
uint8_t sRepeats = 1;
bool ir_role = 0; // 1 = TX role, 0 = RX role

#define RF_PIN_CE 25
#define RF_PIN_CSN 26

// instantiate an object for the nRF24L01 transceiver
RF24 radio(RF_PIN_CE, RF_PIN_CSN); // using pin 7 for the CE pin, and pin 8 for the CSN pin

// Let these addresses be used for the pair
uint8_t address[][3] = {"A0", "A1"};
// It is very helpful to think of an address as a path instead of as
// an identifying device destination

// to use different addresses on a pair of radios, we need a variable to
// uniquely identify which address this radio will use to transmit
bool radioNumber = 1; // 0 uses address[0] to transmit, 1 uses address[1] to transmit

enum
{
    RF_ROLE_RX = 0,
    RF_ROLE_TX
};

// Used to control whether this node is sending or receiving
bool rf_role = RF_ROLE_RX; // 1 = TX role, 0 = RX role

enum
{
    RF_STATE_IDLE = 0,
    RF_STATE_WAIT
};

// Used to control whether this node is sending or receiving
bool rf_state = RF_STATE_IDLE; // 1 = wait for responce, 0 = idle

unsigned long start_timer = 0;
unsigned long end_timer = 0;

// For this example, we'll be using a payload containing
// a single float number that will be incremented
// on every successful transmission
float payload = 0.0;

void setup()
{
    Serial.begin(115200);
    while (!Serial)
    {
        // wait to ensure access to serial over USB
    }

    // Start the receiver and if not 3. parameter specified, take LED_BUILTIN pin from the internal boards definition as default feedback LED
    IrReceiver.begin(IR_RECEIVE_PIN, ENABLE_LED_FEEDBACK);
    IrSender.begin(IR_SEND_PIN); // Start with IR_SEND_PIN as send pin and enable feedback LED at default feedback LED pin

    Serial.print(F("Ready to receive IR signals of protocols: "));
    printActiveIRProtocols(&Serial);

    // initialize the transceiver on the SPI bus
    if (!radio.begin())
    {
        Serial.println(F("radio hardware is not responding!!"));
        while (1)
        {
        } // hold in infinite loop
    }

    // Set the PA Level low to try preventing power supply related problems
    // because these examples are likely run with nodes in close proximity to
    // each other.
    radio.setPALevel(RF24_PA_LOW); // RF24_PA_MAX is default.

    // save on transmission time by setting the radio to only transmit the
    // number of bytes we need to transmit a float
    radio.setPayloadSize(sizeof(payload)); // float datatype occupies 4 bytes

    // set the TX address of the RX node into the TX pipe
    radio.openWritingPipe(address[radioNumber]); // always uses pipe 0

    // set the RX address of the TX node into a RX pipe
    radio.openReadingPipe(1, address[!radioNumber]); // using pipe 1

    // // additional setup specific to the node's role
    // if (rf_role)
    // {
    //     radio.stopListening(); // put radio in TX mode
    // }
    // else
    // {
    //     radio.startListening(); // put radio in RX mode
    // }

    // radio.printDetails();       // (smaller) function that prints raw register values
    // radio.printPrettyDetails(); // (larger) function that prints human readable data
}

/*
 * Send NEC IR protocol
 */
void send_ir_data()
{
    Serial.print(F("Sending: 0x"));
    Serial.print(sAddress, HEX);
    Serial.print(sCommand, HEX);
    Serial.println(sRepeats, HEX);

    // Results for the first loop to: Protocol=NEC Address=0x102 Command=0x34 Raw-Data=0xCB340102 (32 bits)
    IrSender.sendNEC(sAddress, sCommand, sRepeats);
}

void receive_ir_data()
{
    if (IrReceiver.decode())
    {
        Serial.print(F("Decoded protocol: "));
        Serial.print(getProtocolString(IrReceiver.decodedIRData.protocol));
        Serial.print(F("Decoded raw data: "));
        Serial.print(IrReceiver.decodedIRData.decodedRawData, HEX);
        Serial.print(F(", decoded address: "));
        Serial.print(IrReceiver.decodedIRData.address, HEX);
        Serial.print(F(", decoded command: "));
        Serial.println(IrReceiver.decodedIRData.command, HEX);
        IrReceiver.resume();
    }
}

void loop()
{
    /*
     * Print loop values
     */
    Serial.println();
    Serial.print(F("address=0x"));
    Serial.print(sAddress, HEX);
    Serial.print(F(" command=0x"));
    Serial.print(sCommand, HEX);
    Serial.print(F(" repeats="));
    Serial.println(sRepeats);
    Serial.flush();

    send_ir_data();
    // wait for the receiver state machine to detect the end of a protocol
    delay((RECORD_GAP_MICROS / 1000) + 5);
    receive_ir_data();

    // Prepare data for next loop
    sAddress += 0x0101;
    sCommand += 0x11;
    sRepeats++;

    if (rf_role == RF_ROLE_TX)
    {
        // This device is in TX mode

        radio.stopListening(); // put radio in RX mode

        bool report = radio.write(&payload, sizeof(float)); // transmit & save the report

        if (report)
        {
            Serial.print(F("Transmission successful! ")); // payload was delivered
            rf_role = RF_ROLE_RX;
            start_timer = micros(); // start the timer
        }
        else
        {
            Serial.println(F("Transmission failed or timed out")); // payload was not delivered
        }
    }
    else
    {
        // This device is in RX mode

        uint8_t pipe;
        bool flag = false;
        if (radio.available(&pipe))
        {                                           // is there a payload? get the pipe number that recieved it
            uint8_t bytes = radio.getPayloadSize(); // get the size of the payload
            radio.read(&payload, bytes);            // fetch payload from FIFO
            Serial.print(F("Received "));
            Serial.print(bytes); // print the size of the payload
            Serial.print(F(" bytes on pipe "));
            Serial.print(pipe); // print the pipe number
            Serial.print(F(": "));
            Serial.println(payload); // print the payload's value
            flag = true;
        }

        if (rf_state == RF_STATE_WAIT)
        {
            if (flag)
            {
                rf_state == RF_STATE_IDLE;
            }
        }
    } // rf_role

    delay(10); // Loop delay
}
